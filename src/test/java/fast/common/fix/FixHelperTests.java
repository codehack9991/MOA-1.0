package fast.common.fix;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.junit.Assert;
import org.junit.Test;

import fast.common.core.Configurator;
import quickfix.ConfigError;
import quickfix.Group;
import quickfix.Message;

public class FixHelperTests {

	@Test
	public void verifyAdditionalTags() throws ConfigError, Exception {
		String actualMessage = "8=FIX.4.29=20035=D34=249=CL_TGT1152=20180212-15:49:08.10900056=CL_SDR111=CITI000000000111=1/20180212-15:49:08.84115=GBX21=138=10040=244=19147=A48=BARC.L54=155=BARC.L59=060=20180212-15:49:08.83400010=245";
		String expectedMessage = "8=FIX.4.29=20035=D34=/(.*)/49=CL_TGT1152=20180212-15:49:08.10900056=CL_SDR111=CITI000000000111=1/20180212-15:49:08.84115=GBX21=138=10040=244=19147=A48=BARC.L54=155=BARC.L59=060=20180212-15:49:08.83400010=245";

		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX42.xml");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		helper.compareMessage(helper.createFixMessage(actualMessage), helper.createFixMessage(expectedMessage), true);
	}

	@Test
	public void verifyAdditionalTagsError() throws ConfigError, Exception {
		String actualMessage = "8=FIX.4.29=20035=D34=249=CL_TGT1152=20180212-15:49:08.10900056=CL_SDR111=CITI000000000111=1/20180212-15:49:08.84115=GBX21=138=10040=244=19147=A48=BARC.L54=155=BARC.L59=060=20180212-15:49:08.83400010=245";
		String expectedMessage = "8=FIX.4.29=20035=D34=/(.*)/49=CL_TGT1152=20180212-15:49:08.10900056=CL_SDR111=CITI000000000111=1/20180212-15:49:08.84115=GBX21=138=10040=244=19147=A54=155=BARC.L59=060=20180212-15:49:08.83400010=245";
		String expectedTagMissing = "48";

		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX42.xml");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		try {
			helper.compareMessage(helper.createFixMessage(actualMessage), helper.createFixMessage(expectedMessage),
					true);
		} catch (MessageIncorrect exp) {
			System.out.println("Exception: " + exp.getMessage());
			HashSet<String> reportTags = exp.getReportTags();
			boolean expectedTagFound = false;
			// set should contain the missing tag
			for (String tag : reportTags) {
				if (tag.contains(expectedTagMissing)) {
					expectedTagFound = true;
					break;
				}
			}
			Assert.assertTrue("Expected tag not found", expectedTagFound);
		}
	}

	@Test
	public void verifyTag10IsCorrectlyHandled() throws ConfigError, Exception {
		String message = "8=FIX.4.2|9=200|35=D|34=2|49=CL_TGT11|52=20180212-15:49:08.109000|56=CL_SDR11|1=CITI0000000001|11=1/20180212-15:49:08.841|15=GBX|21=1|38=100|40=2|44=191|47=A|48=BARC.L|54=1|55=BARC.L|59=0|10=245|60=20180212-15:49:08.834000";
		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX42.xml");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		Message convertedMsg = helper.convertFulluserstrToMessage(null, message);
		Assert.assertTrue("Tag 60 is not present", convertedMsg.isSetField(60));
	}

	@Test
	public void verifyMessageCreate() throws ConfigError, Exception {
		String message = "8=FIX.4.29=60235=D49=POC_DC_V56=CITIPOC_DC_V34=88152=20180322-14:25:50.932467116=lseuat129=HYBR_LSE_110469=20180322-14:25:51.5550001=CITI000000000111=H0007_1_2018032214255149715=GBX21=138=140=244=130048=JLT.L54=159=060=20180322-14:25:51.54100055=JLT.L47=P7928=OFD370=20180322-14:25:51.55515002=B15004=115005=015006=111504=SWAP11505=N1724=2100003=Y100100=20180322-14:25:50.93192037=H0007_1_20180322142551497_2203201875=20180322453=2448=326150104447=P452=1222376=3448=010001001447=P452=122376=2454=1456=101455=79237858455=512858456=s8470=GBX10895=1001972312100001=54710=033";
		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX42citi.xml");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		Message convertedMsg = helper.createFixMessage(message);
		Assert.assertTrue("Tag 100001 is not present", convertedMsg.isSetField(100001));
		Assert.assertTrue("Tag 370 is not present", convertedMsg.getHeader().isSetField(370));
		Assert.assertTrue("Tag 7928 is not present", convertedMsg.isSetField(7928));
	}

	@Test
	public void verifyCompareMultipleMessages() throws ConfigError, Exception {
		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX42citi.xml");
		ArrayList<String> inputSrings = new ArrayList<String>() {
			{
				add("8=FIX.4.29=59035=849=POC_DC_C56=CITIPOC_DC_C34=13852=20180326-08:38:10.583756129=CL_TGT10116=CL_SDR101=CITI000000000140=211=S0010_7_2018032608380990341=S0010_6_2018032608380960037=S0010_6_20180326083809600_26032018198=O0Z9tBtYVS0r54=115=GBX59=038=1151=044=130039=4150=420=031=032=06=0.0000000014=017=E0Z9t73VvlbS527=E0Z9t73VvlbS60=20180326-08:38:10.58000055=JLTl.TQ84=1100=QPB1133=D775=110081=6_20180326083809600100100=20180326-08:38:10.58257510469=20180326-08:38:09.60600075=20180326454=1456=101455=79237858455=512858456=s8470=GBX10895=1004403483100001=118110=103");
				add("8=FIX.4.29=15635=j49=POC_DC_C56=CITIPOC_DC_C34=20252=20180308-09:00:11.085342129=CL_TGT10116=CL_SDR1045=21372=7380=358=iXecute reject: unsupported message type10=173");
				add("8=FIX.4.29=15635=j49=POC_DC_C56=CITIPOC_DC_C34=20352=20180308-09:00:11.307510129=CL_TGT10116=CL_SDR1045=22372=E380=358=iXecute reject: unsupported message type10=183");
				add("8=FIX.4.29=15635=j49=POC_DC_C56=CITIPOC_DC_C34=20452=20180308-09:00:11.569935129=CL_TGT10116=CL_SDR1045=23372=8380=358=iXecute reject: unsupported message type10=193");
				add("8=FIX.4.29=15635=j49=POC_DC_C56=CITIPOC_DC_C34=20552=20180308-09:00:11.780374129=CL_TGT10116=CL_SDR1045=24372=6380=358=iXecute reject: unsupported message type10=185");
			}
		};
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		ArrayList<Message> receivedMessages = new ArrayList<Message>();
		for(String msg:inputSrings){
			receivedMessages.add(helper.createFixMessage(msg));
		}
		String expectedMessage = "8=FIX.4.2|35=j|380=3|372=E";
		Message msg = helper.checkReceived(receivedMessages, helper.convertFulluserstrToMessage(null, expectedMessage));
		Assert.assertEquals("Message not found", msg.getHeader().getString(52), "20180308-09:00:11.307510");
	}
	
	@Test
	public void verifyAdditionalTagsConfigTrue() throws ConfigError, Exception {
		ArrayList<String> inputSrings = new ArrayList<String>() {
			{
				add("8=FIX.4.235=D34=249=CL_TGT1152=20180212-15:49:08.10900056=CL_SDR111=CITI000000000111=1/20180212-15:49:08.84115=GBX21=138=10040=244=19147=A48=BARC.L54=155=BARC.L59=060=20180212-15:49:08.83400010=245");
			}
		};
		String expectedMessage = "8=FIX.4.2|9=200|35=D|34=/(.*)/|49=CL_TGT11|52=20180212-15:49:08.109000|56=CL_SDR11|1=CITI0000000001|11=1/20180212-15:49:08.841|15=GBX|21=1|38=100|40=2|44=191|47=A|54=1|55=BARC.L|59=0|60=20180212-15:49:08.834000|10=245";
		String expectedTagMissing = "48";

		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX42.xml");
		Configurator configurator = Configurator.getInstance();
		Map settings = configurator.getConfiguration();
		settings.put("FailOnAdditionalTags", true);
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		ArrayList<Message> messageData = new ArrayList<Message>();
		for(String msg:inputSrings){
			messageData.add(helper.createFixMessage(msg));
		}
		boolean exceptionRaised = false;
		try {
			helper.checkReceived(messageData, helper.convertFulluserstrToMessage(null, expectedMessage));
		} catch (MessageIncorrect exp) {
			System.out.println("Exception: " + exp.getMessage());
			exceptionRaised = true;
			HashSet<String> reportTags = exp.getReportTags();
			boolean expectedTagFound = false;
			// set should contain the missing tag
			for (String tag : reportTags) {
				if (tag.contains(expectedTagMissing)) {
					expectedTagFound = true;
					break;
				}
			}
			Assert.assertTrue("Expected tag not found", expectedTagFound);
		}
		Assert.assertTrue("Additional Tag exception not raised", exceptionRaised);
	}
	
	@Test
	public void verifyAdditionalTagsConfigFalse() throws ConfigError, Exception {
		ArrayList<String> inputSrings = new ArrayList<String>() {
			{
				add("8=FIX.4.235=D34=249=CL_TGT1152=20180212-15:49:08.10900056=CL_SDR111=CITI000000000111=1/20180212-15:49:08.84115=GBX21=138=10040=244=19147=A48=BARC.L54=155=BARC.L59=060=20180212-15:49:08.83400010=245");
			}
		};
		String expectedMessage = "8=FIX.4.2|9=200|35=D|34=/(.*)/|49=CL_TGT11|52=20180212-15:49:08.109000|56=CL_SDR11|1=CITI0000000001|11=1/20180212-15:49:08.841|15=GBX|21=1|38=100|40=2|44=191|47=A|54=1|55=BARC.L|59=0|60=20180212-15:49:08.834000|10=245";
		String expectedTagMissing = "48";

		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX42.xml");
		Configurator configurator = Configurator.getInstance();
		Map settings = configurator.getConfiguration();
		settings.put("FailOnAdditionalTags", false);
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		ArrayList<Message> messageData = new ArrayList<Message>();
		for(String msg:inputSrings){
			messageData.add(helper.createFixMessage(msg));
		}
		helper.checkReceived(messageData, helper.convertFulluserstrToMessage(null, expectedMessage));
	}
	
	@Test
	public void verifyMessageParseUZDO() throws ConfigError, Exception {
		String message = "8=FIX.4.49=151735=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2152=20170518-11:45:53.376122=20170518-11:45:52.178-8=230888291769545-11=14951079551821=BG_AE154=1581=110040=S10018=17138GBp46810053=DMA11=13817155214:CFAK42S28013=R10080=20170518-11:45:53.37310049=N11041=1711043=10.011097=0.0421=GBR10038=LNPG14=10.010025=111032=115=GBP10074=11027=Y426=3.25-1=17138G18xcr#0100=EUCB248=44015093456=10111022=20170518-11:45:53.37417=1381715529018=510006=ContinuousOrder;;TBS;CI13817155214;TTDMA;10093=110037=QFF29=110067=325.010066=20170518-11:45:52.90630=TRQX31=3.2532=10.0779=20170518-11:45:55.18211026=20170518-11:45:53.376151=0.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17138G18xcr38=10.010008=044=3.25-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=4401509322=101120=GBP63=010005=7510063=10.010065=0.055=RBS.L-14=059=075=2017051810039=LNPG10050=DMNE10013=;CC:13817155214:CFAK42S2;DT:00124552;60=20170518-11:45:52.90610079=310077=110078=1010092=710064=;MC:1;EX:TRQX;10081=1381715521410083=QFF660=10311184=10.011210=17138G18xcr9871=17138G18xcr100169=N6=3.25425=10.010217=N10208=UK.QFF.OES10184=17138G18xcr10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S28002=CFAK42S28003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=10.010537=TRQX1133=D10673=N10236=Bloomberg10237=Radianz424=10.010890=0.010895=1000554592454=110438=RIO.4.512034=Y-35=810=000";
		
		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX44New.xml");
		Map settings = Configurator.getInstance().getConfiguration();
		settings.put("AllowEmptyTagsInMsg", "true");
		settings.put("RaiseFixParseException", "true");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		
		Message convertedMsg = helper.createFixMessage(message);
		Group gp = convertedMsg.getGroup(1, 382);
		String value = gp.getString(375);
		Assert.assertTrue("Tag -1 is not present", convertedMsg.isSetField(-1));
		Assert.assertTrue("Tag 10438 is not present", convertedMsg.isSetField(10438));
		Assert.assertTrue("Tag 454 is not present", convertedMsg.isSetField(382));
		Assert.assertNotNull("Tag 375 is not present", value);
		
		message = "8=FIX.4.4|9=1517|35=UZDO|49=QFF|56=CGMI|50=C4XO_UKQA_C1U_2|57=EUCB2|143=21|52=20170518-11:45:53.376|122=20170518-11:45:52.178|-8=230888291769545|-11=1495107955182|1=BG_AE1|54=1|581=1|10040=S|10018=17138GBp468|10053=DMA|11=13817155214:CFAK42S2|8013=R|10080=20170518-11:45:53.373|10049=N|11041=17|11043=10.0|11097=0.0|421=GBR|10038=LNPG|14=10.0|10025=1|11032=1|15=GBP|10074=|11027=Y|426=3.25|-1=17138G18xcr#0|100=EUCB2|48=44015093|456=101|11022=20170518-11:45:53.374|17=13817155290|18=5|10006=ContinuousOrder;;TBS;CI13817155214;TTDMA;|10093=1|10037=QFF|29=1|10067=325.0|10066=20170518-11:45:52.906|30=TRQX|31=3.25|32=10.0|779=20170518-11:45:55.182|11026=20170518-11:45:53.376|151=0.0|10031=0A|10016=QFF|40=2|528=A|10044=;8018=C4C_UKQA_C1U_2^^^~|37=17138G18xcr|38=10.0|10008=0|44=3.25|-33=;RC:E;|9730=1|10033=4|10042=A|10036=LNPG|10043= |455=44015093|22=101|120=GBP|63=0|10005=75|10063=10.0|10065=0.0|55=RBS.L|-14=0|59=0|75=20170518|10039=LNPG|10050=DMNE|10013=;CC:13817155214:CFAK42S2;DT:00124552;|60=20170518-11:45:52.906|10079=3|10077=1|10078=10|10092=7|10064=;MC:1;EX:TRQX;|10081=13817155214|10083=QFF|660=103|11184=10.0|11210=17138G18xcr|9871=17138G18xcr|100169=N|6=3.25|425=10.0|10217=N|10208=UK.QFF.OES|10184=17138G18xcr|10203=EMEAQFF|10292=128|10204=EUCB2|10202=EMEADMA|10201=UKFF|382=1|375=TRQX|8001=CFAK42S2|8002=CFAK42S2|8003=EUCB2|8004=BG_AE1|10515=75|10518=75|10533=1|10534=TRQX|10535=5|10536=10.0|10537=TRQX|1133=D|10673=N|10236=Bloomberg|10237=Radianz|424=10.0|10890=0.0|10895=1000554592|454=1|10438=RIO.4.5|12034=Y|-35=8|10=000";

		convertedMsg = helper.convertFulluserstrToMessage(null, message);
		Assert.assertTrue("Tag -1 is not present", convertedMsg.isSetField(-1));
		Assert.assertTrue("Tag 10438 is not present", convertedMsg.isSetField(10438));
		Assert.assertTrue("Tag 454 is not present", convertedMsg.isSetField(454));
		Assert.assertTrue("Tag 455 is not present", convertedMsg.isSetField(455));

	}
	
	@Test
	public void handleMessageParseUBT() throws ConfigError, Exception {
		String message = "8=FIX.4.49=388735=UBT-8=559109246110633-99=295=195496=8=FIX.4.49=193035=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2052=20170522-06:56:10.562122=20170522-06:56:10.464-11=14954361760941=BG_AE154=1581=110040=S10018=17142GBp7ez10053=DMA11=205padJBc.3N4NTj8013=R10080=20170522-06:56:10.55510049=N11041=1711043=15.011097=10.0421=GBR10038=LNPG14=5.010025=111032=115=GBP10074=11027=Y426=2.1-1=17142GB7uso#0100=EUCB221=148=59198795167=CS456=10111022=20170522-06:56:10.55611059=117=1421226107318=510006=;TBS;;;TBS;CI14207561044;TTDMA;10093=110037=QFF29=110067=210.010066=20170522-06:56:14.84430=TRQX31=2.132=5.0779=20170522-06:56:16.09511026=20170522-06:56:10.562151=10.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17142GB7uso38=15.010008=0-5=17142G18z1w44=2.1-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=5919879522=101120=GBP63=010005=7510063=5.010065=0.055=VOD.L-14=059=075=2017052210039=LNPG377=N132=224.9133=225.010013=;CC:205padJBc.3N4NTj;DT:00075610;60=20170522-06:56:14.84410079=310077=110078=1010092=710064=;MC:1;EX:TRQX;10081=1420756104410083=GTC_HANDLER660=10311184=15.011210=17142G18z1w100232=5809871=17142GB7uso100169=N6=2.1425=5.010210=N10217=N10208=UK.QFF.OES10184=17142GB7uso10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S_A18002=CFAK42S_A18003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=5.010537=TRQX10521=110522=O10523=110524=SBSH10525=11133=D11083=BG_AE110673=N10236=Bloomberg10237=Radianz424=15.010890=0.010895=10005545928008=QDMA8015=CFAK42S_A18012=201705228007=?8037=612034=Y-8003=EUCB210438=RIO.4.5454=18019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;8022=PDB8023=20170522-16:00:00-35=810=00095=187796=8=FIX.4.49=185335=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2052=20170522-06:56:10.559122=20170522-06:56:10.464-11=14954361760941=BG_AE154=1581=110040=S10018=17142GBp7ez10053=DMA11=14207561044:CFAK42S_A110080=20170522-06:56:10.55510049=N11041=1711043=0.011097=25.0421=GBR10038=LNPG14=5.010025=111032=315=GBP10074=11027=N426=2.1-1=17142G18z1w#0100=QFF21=148=59198795456=10111022=20170522-06:56:10.55611059=117=1421226107318=510006=;TBS;TFGTC;CI14207561044;TTDMA;10093=110037=QFF29=110067=210.010066=20170522-06:56:14.84430=TRQX31=2.132=5.0779=20170522-06:56:16.09511026=20170522-06:56:10.559151=10.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17142G18z1w38=15.010008=044=2.1-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=5919879522=101120=GBP63=010005=7510063=5.010065=0.055=VOD.L-14=059=175=2017052210039=LNPG132=0.0-30=15.010013=;CC:14207561044:CFAK42S_A1;DT:00075610;60=20170522-06:56:14.84410079=310077=110078=1010092=710064=;EX:TRQX;10081=1420756104410083=QFF660=10311184=15.011210=17142G18z1w9871=17142GB7uso10140=1561=1.0118=0.0100169=N6=2.1425=5.010217=N10208=UK.QFF.OES10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S_A18002=CFAK42S_A18003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=5.010537=TRQX10521=110522=O10523=110524=SBSH10525=11133=D10673=N10236=Bloomberg10237=Radianz424=15.010890=0.010895=10005545928008=QDMA8015=CFAK42S_A18012=201705228037=68007=?12034=N10438=RIO.4.5454=18019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;8022=PDBGTC8023=20180522-17:00:00-35=810=00010=000";
		
		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX44New.xml");
		Map settings = Configurator.getInstance().getConfiguration();
		settings.put("AllowEmptyTagsInMsg", "true");
		settings.put("RaiseFixParseException", "true");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		
		Message convertedMsg = helper.createFixMessage(message);
		Assert.assertTrue("Tag -99 is not present", convertedMsg.isSetField(-99));
		Assert.assertTrue("Tag -8 is not present", convertedMsg.isSetField(-8));
		
		Group gp = convertedMsg.getGroup(1, -99);
		String value = gp.getString(96);
		Assert.assertNotNull("Tag 96 is not present", value);
		gp = convertedMsg.getGroup(2, -99);
		value = gp.getString(96);
		Assert.assertNotNull("Tag 96 is not present", value);
		
		message = "8=FIX.4.4|9=3887|35=UBT|-8=559109246110633|NoRawData=2|95=1954|96=8=FIX.4.4|9=1930|35=UZDO|49=QFF|56=CGMI|50=C4XO_UKQA_C1U_2|57=EUCB2|143=20|52=20170522-06:56:10.562|122=20170522-06:56:10.464|-11=1495436176094|1=BG_AE1|54=1|581=1|10040=S|10018=17142GBp7ez|10053=DMA|11=205padJBc.3N4NTj|8013=R|10080=20170522-06:56:10.555|10049=N|11041=17|11043=15.0|11097=10.0|421=GBR|10038=LNPG|14=5.0|10025=1|11032=1|15=GBP|10074=|11027=Y|426=2.1|-1=17142GB7uso#0|100=EUCB2|21=1|48=59198795|167=CS|456=101|11022=20170522-06:56:10.556|11059=1|17=14212261073|18=5|10006=;TBS;;;TBS;CI14207561044;TTDMA;|10093=1|10037=QFF|29=1|10067=210.0|10066=20170522-06:56:14.844|30=TRQX|31=2.1|32=5.0|779=20170522-06:56:16.095|11026=20170522-06:56:10.562|151=10.0|10031=0A|10016=QFF|40=2|528=A|10044=;8018=C4C_UKQA_C1U_2^^^~|37=17142GB7uso|38=15.0|10008=0|-5=17142G18z1w|44=2.1|-33=;RC:E;|9730=1|10033=4|10042=A|10036=LNPG|10043= |455=59198795|22=101|120=GBP|63=0|10005=75|10063=5.0|10065=0.0|55=VOD.L|-14=0|59=0|75=20170522|10039=LNPG|377=N|132=224.9|133=225.0|10013=;CC:205padJBc.3N4NTj;DT:00075610;|60=20170522-06:56:14.844|10079=3|10077=1|10078=10|10092=7|10064=;MC:1;EX:TRQX;|10081=14207561044|10083=GTC_HANDLER|660=103|11184=15.0|11210=17142G18z1w|100232=580|9871=17142GB7uso|100169=N|6=2.1|425=5.0|10210=N|10217=N|10208=UK.QFF.OES|10184=17142GB7uso|10203=EMEAQFF|10292=128|10204=EUCB2|10202=EMEADMA|10201=UKFF|382=1|375=TRQX|8001=CFAK42S_A1|8002=CFAK42S_A1|8003=EUCB2|8004=BG_AE1|10515=75|10518=75|10533=1|10534=TRQX|10535=5|10536=5.0|10537=TRQX|10521=1|10522=O|10523=1|10524=SBSH|10525=1|1133=D|11083=BG_AE1|10673=N|10236=Bloomberg|10237=Radianz|424=15.0|10890=0.0|10895=1000554592|8008=QDMA|8015=CFAK42S_A1|8012=20170522|8007=?|8037=6|12034=Y|-8003=EUCB2|10438=RIO.4.5|454=1|8019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;|8022=PDB|8023=20170522-16:00:00|-35=8|10=000||95=1877|96=8=FIX.4.4|9=1853|35=UZDO|49=QFF|56=CGMI|50=C4XO_UKQA_C1U_2|57=EUCB2|143=20|52=20170522-06:56:10.559|122=20170522-06:56:10.464|-11=1495436176094|1=BG_AE1|54=1|581=1|10040=S|10018=17142GBp7ez|10053=DMA|11=14207561044:CFAK42S_A1|10080=20170522-06:56:10.555|10049=N|11041=17|11043=0.0|11097=25.0|421=GBR|10038=LNPG|14=5.0|10025=1|11032=3|15=GBP|10074=|11027=N|426=2.1|-1=17142G18z1w#0|100=QFF|21=1|48=59198795|456=101|11022=20170522-06:56:10.556|11059=1|17=14212261073|18=5|10006=;TBS;TFGTC;CI14207561044;TTDMA;|10093=1|10037=QFF|29=1|10067=210.0|10066=20170522-06:56:14.844|30=TRQX|31=2.1|32=5.0|779=20170522-06:56:16.095|11026=20170522-06:56:10.559|151=10.0|10031=0A|10016=QFF|40=2|528=A|10044=;8018=C4C_UKQA_C1U_2^^^~|37=17142G18z1w|38=15.0|10008=0|44=2.1|-33=;RC:E;|9730=1|10033=4|10042=A|10036=LNPG|10043= |455=59198795|22=101|120=GBP|63=0|10005=75|10063=5.0|10065=0.0|55=VOD.L|-14=0|59=1|75=20170522|10039=LNPG|132=0.0|-30=15.0|10013=;CC:14207561044:CFAK42S_A1;DT:00075610;|60=20170522-06:56:14.844|10079=3|10077=1|10078=10|10092=7|10064=;EX:TRQX;|10081=14207561044|10083=QFF|660=103|11184=15.0|11210=17142G18z1w|9871=17142GB7uso|10140=1|561=1.0|118=0.0|100169=N|6=2.1|425=5.0|10217=N|10208=UK.QFF.OES|10203=EMEAQFF|10292=128|10204=EUCB2|10202=EMEADMA|10201=UKFF|382=1|375=TRQX|8001=CFAK42S_A1|8002=CFAK42S_A1|8003=EUCB2|8004=BG_AE1|10515=75|10518=75|10533=1|10534=TRQX|10535=5|10536=5.0|10537=TRQX|10521=1|10522=O|10523=1|10524=SBSH|10525=1|1133=D|10673=N|10236=Bloomberg|10237=Radianz|424=15.0|10890=0.0|10895=1000554592|8008=QDMA|8015=CFAK42S_A1|8012=20170522|8037=6|8007=?|12034=N|10438=RIO.4.5|454=1|8019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;|8022=PDBGTC|8023=20180522-17:00:00|-35=8|10=000||10=000|";
		convertedMsg = helper.convertUserstrToMessage(null, null, message, null);
		Assert.assertTrue("Tag -99 is not identified while using NoRawData", convertedMsg.isSetField(-99));

	}
	
	@Test
	public void compareMessageParseUBTSuccess() throws ConfigError, Exception {
		String message = "8=FIX.4.49=388735=UBT-8=559109246110633-99=295=195496=8=FIX.4.49=193035=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2052=20170522-06:56:10.562122=20170522-06:56:10.464-11=14954361760941=BG_AE154=1581=110040=S10018=17142GBp7ez10053=DMA11=205padJBc.3N4NTj8013=R10080=20170522-06:56:10.55510049=N11041=1711043=15.011097=10.0421=GBR10038=LNPG14=5.010025=111032=115=GBP10074=11027=Y426=2.1-1=17142GB7uso#0100=EUCB221=148=59198795167=CS456=10111022=20170522-06:56:10.55611059=117=1421226107318=510006=;TBS;;;TBS;CI14207561044;TTDMA;10093=110037=QFF29=110067=210.010066=20170522-06:56:14.84430=TRQX31=2.132=5.0779=20170522-06:56:16.09511026=20170522-06:56:10.562151=10.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17142GB7uso38=15.010008=0-5=17142G18z1w44=2.1-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=5919879522=101120=GBP63=010005=7510063=5.010065=0.055=VOD.L-14=059=075=2017052210039=LNPG377=N132=224.9133=225.010013=;CC:205padJBc.3N4NTj;DT:00075610;60=20170522-06:56:14.84410079=310077=110078=1010092=710064=;MC:1;EX:TRQX;10081=1420756104410083=GTC_HANDLER660=10311184=15.011210=17142G18z1w100232=5809871=17142GB7uso100169=N6=2.1425=5.010210=N10217=N10208=UK.QFF.OES10184=17142GB7uso10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S_A18002=CFAK42S_A18003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=5.010537=TRQX10521=110522=O10523=110524=SBSH10525=11133=D11083=BG_AE110673=N10236=Bloomberg10237=Radianz424=15.010890=0.010895=10005545928008=QDMA8015=CFAK42S_A18012=201705228007=?8037=612034=Y-8003=EUCB210438=RIO.4.5454=18019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;8022=PDB8023=20170522-16:00:00-35=810=00095=187796=8=FIX.4.49=185335=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2052=20170522-06:56:10.559122=20170522-06:56:10.464-11=14954361760941=BG_AE154=1581=110040=S10018=17142GBp7ez10053=DMA11=14207561044:CFAK42S_A110080=20170522-06:56:10.55510049=N11041=1711043=0.011097=25.0421=GBR10038=LNPG14=5.010025=111032=315=GBP10074=11027=N426=2.1-1=17142G18z1w#0100=QFF21=148=59198795456=10111022=20170522-06:56:10.55611059=117=1421226107318=510006=;TBS;TFGTC;CI14207561044;TTDMA;10093=110037=QFF29=110067=210.010066=20170522-06:56:14.84430=TRQX31=2.132=5.0779=20170522-06:56:16.09511026=20170522-06:56:10.559151=10.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17142G18z1w38=15.010008=044=2.1-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=5919879522=101120=GBP63=010005=7510063=5.010065=0.055=VOD.L-14=059=175=2017052210039=LNPG132=0.0-30=15.010013=;CC:14207561044:CFAK42S_A1;DT:00075610;60=20170522-06:56:14.84410079=310077=110078=1010092=710064=;EX:TRQX;10081=1420756104410083=QFF660=10311184=15.011210=17142G18z1w9871=17142GB7uso10140=1561=1.0118=0.0100169=N6=2.1425=5.010217=N10208=UK.QFF.OES10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S_A18002=CFAK42S_A18003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=5.010537=TRQX10521=110522=O10523=110524=SBSH10525=11133=D10673=N10236=Bloomberg10237=Radianz424=15.010890=0.010895=10005545928008=QDMA8015=CFAK42S_A18012=201705228037=68007=?12034=N10438=RIO.4.5454=18019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;8022=PDBGTC8023=20180522-17:00:00-35=810=00010=000";
		String expMessage = "8=FIX.4.49=388735=UBT-8=559109246110633-99=295=195496=8=FIX.4.49=193035=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2052=20170522-06:56:10.562122=20170522-06:56:10.464-11=14954361760941=BG_AE154=1581=110040=S10018=17142GBp7ez10053=DMA11=205padJBc.3N4NTj8013=R10080=20170522-06:56:10.55510049=N11041=1711043=15.011097=10.0421=GBR10038=LNPG14=5.010025=111032=115=GBP10074=11027=Y426=2.1-1=17142GB7uso#0100=EUCB221=148=59198795167=CS456=10111022=20170522-06:56:10.55611059=117=1421226107318=510006=;TBS;;;TBS;CI14207561044;TTDMA;10093=110037=QFF29=110067=210.010066=20170522-06:56:14.84430=TRQX31=2.132=5.0779=20170522-06:56:16.09511026=20170522-06:56:10.562151=10.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17142GB7uso38=15.010008=0-5=17142G18z1w44=2.1-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=5919879522=101120=GBP63=010005=7510063=5.010065=0.055=VOD.L-14=059=075=2017052210039=LNPG377=N132=224.9133=225.010013=;CC:205padJBc.3N4NTj;DT:00075610;60=20170522-06:56:14.84410079=310077=110078=1010092=710064=;MC:1;EX:TRQX;10081=1420756104410083=GTC_HANDLER660=10311184=15.011210=17142G18z1w100232=5809871=17142GB7uso100169=N6=2.1425=5.010210=N10217=N10208=UK.QFF.OES10184=17142GB7uso10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S_A18002=CFAK42S_A18003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=5.010537=TRQX10521=110522=O10523=110524=SBSH10525=11133=D11083=BG_AE110673=N10236=Bloomberg10237=Radianz424=15.010890=0.010895=10005545928008=QDMA8015=CFAK42S_A18012=201705228007=?8037=612034=Y-8003=EUCB210438=RIO.4.5454=18019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;8022=PDB8023=20170522-16:00:00-35=810=00095=187796=8=FIX.4.49=185335=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2052=20170522-06:56:10.559122=20170522-06:56:10.464-11=14954361760941=BG_AE154=1581=110040=S10018=17142GBp7ez10053=DMA11=14207561044:CFAK42S_A110080=20170522-06:56:10.55510049=N11041=1711043=0.011097=25.0421=GBR10038=LNPG14=5.010025=111032=315=GBP10074=11027=N426=2.1-1=17142G18z1w#0100=QFF21=148=59198795456=10111022=20170522-06:56:10.55611059=117=1421226107318=510006=;TBS;TFGTC;CI14207561044;TTDMA;10093=110037=QFF29=110067=210.010066=20170522-06:56:14.84430=TRQX31=2.132=5.0779=20170522-06:56:16.09511026=20170522-06:56:10.559151=10.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17142G18z1w38=15.010008=044=2.1-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=5919879522=101120=GBP63=010005=7510063=5.010065=0.055=VOD.L-14=059=175=2017052210039=LNPG132=0.0-30=15.010013=;CC:14207561044:CFAK42S_A1;DT:00075610;60=20170522-06:56:14.84410079=310077=110078=1010092=710064=;EX:TRQX;10081=1420756104410083=QFF660=10311184=15.011210=17142G18z1w9871=17142GB7uso10140=1561=1.0118=0.0100169=N6=2.1425=5.010217=N10208=UK.QFF.OES10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S_A18002=CFAK42S_A18003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=5.010537=TRQX10521=110522=O10523=110524=SBSH10525=11133=D10673=N10236=Bloomberg10237=Radianz424=15.010890=0.010895=10005545928008=QDMA8015=CFAK42S_A18012=201705228037=68007=?12034=N10438=RIO.4.5454=18019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;8022=PDBGTC8023=20180522-17:00:00-35=810=00010=000";
		
		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX44New.xml");
		Map settings = Configurator.getInstance().getConfiguration();
		settings.put("AllowEmptyTagsInMsg", "true");
		settings.put("RaiseFixParseException", "true");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		
		Message actualConvertedMsg = helper.createFixMessage(message);
		Message expConvertedMsg = helper.createFixMessage(expMessage);
		
		helper.compareMessage(actualConvertedMsg, expConvertedMsg, false);
	}
	
	@Test
	public void compareMessageParseUBTFail() throws ConfigError, Exception {
		String message = "8=FIX.4.49=388735=UBT-8=559109246110633-99=295=195496=8=FIX.4.49=193035=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2052=20170522-06:56:10.562122=20170522-06:56:10.464-11=14954361760941=BG_AE154=1581=110040=S10018=17142GBp7ez10053=DMA11=205padJBc.3N4NTj8013=R10080=20170522-06:56:10.55510049=N11041=1711043=15.011097=10.0421=GBR10038=LNPG14=5.010025=111032=115=GBP10074=11027=Y426=2.1-1=17142GB7uso#0100=EUCB221=148=59198795167=CS456=10111022=20170522-06:56:10.55611059=117=1421226107318=510006=;TBS;;;TBS;CI14207561044;TTDMA;10093=110037=QFF29=110067=210.010066=20170522-06:56:14.84430=TRQX31=2.132=5.0779=20170522-06:56:16.09511026=20170522-06:56:10.562151=10.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17142GB7uso38=15.010008=0-5=17142G18z1w44=2.1-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=5919879522=101120=GBP63=010005=7510063=5.010065=0.055=VOD.L-14=059=075=2017052210039=LNPG377=N132=224.9133=225.010013=;CC:205padJBc.3N4NTj;DT:00075610;60=20170522-06:56:14.84410079=310077=110078=1010092=710064=;MC:1;EX:TRQX;10081=1420756104410083=GTC_HANDLER660=10311184=15.011210=17142G18z1w100232=5809871=17142GB7uso100169=N6=2.1425=5.010210=N10217=N10208=UK.QFF.OES10184=17142GB7uso10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S_A18002=CFAK42S_A18003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=5.010537=TRQX10521=110522=O10523=110524=SBSH10525=11133=D11083=BG_AE110673=N10236=Bloomberg10237=Radianz424=15.010890=0.010895=10005545928008=QDMA8015=CFAK42S_A18012=201705228007=?8037=612034=Y-8003=EUCB210438=RIO.4.5454=18019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;8022=PDB8023=20170522-16:00:00-35=810=00095=187796=8=FIX.4.49=185335=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2052=20170522-06:56:10.559122=20170522-06:56:10.464-11=14954361760941=BG_AE154=1581=110040=S10018=17142GBp7ez10053=DMA11=14207561044:CFAK42S_A110080=20170522-06:56:10.55510049=N11041=1711043=0.011097=25.0421=GBR10038=LNPG14=5.010025=111032=315=GBP10074=11027=N426=2.1-1=17142G18z1w#0100=QFF21=148=59198795456=10111022=20170522-06:56:10.55611059=117=1421226107318=510006=;TBS;TFGTC;CI14207561044;TTDMA;10093=110037=QFF29=110067=210.010066=20170522-06:56:14.84430=TRQX31=2.132=5.0779=20170522-06:56:16.09511026=20170522-06:56:10.559151=10.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17142G18z1w38=15.010008=044=2.1-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=5919879522=101120=GBP63=010005=7510063=5.010065=0.055=VOD.L-14=059=175=2017052210039=LNPG132=0.0-30=15.010013=;CC:14207561044:CFAK42S_A1;DT:00075610;60=20170522-06:56:14.84410079=310077=110078=1010092=710064=;EX:TRQX;10081=1420756104410083=QFF660=10311184=15.011210=17142G18z1w9871=17142GB7uso10140=1561=1.0118=0.0100169=N6=2.1425=5.010217=N10208=UK.QFF.OES10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S_A18002=CFAK42S_A18003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=5.010537=TRQX10521=110522=O10523=110524=SBSH10525=11133=D10673=N10236=Bloomberg10237=Radianz424=15.010890=0.010895=10005545928008=QDMA8015=CFAK42S_A18012=201705228037=68007=?12034=N10438=RIO.4.5454=18019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;8022=PDBGTC8023=20180522-17:00:00-35=810=00010=000";
		String expMessage = "8=FIX.4.49=388735=UBT-8=559109246110633-99=295=195496=8=FIX.4.49=193035=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2052=20170522-06:56:10.561122=20170522-06:56:10.464-11=14954361760941=BG_AE154=1581=110040=S10018=17142GBp7ez10053=DMA11=205padJBc.3N4NTj8013=R10080=20170522-06:56:10.55510049=N11041=1711043=15.011097=10.0421=GBR10038=LNPG14=5.010025=111032=115=GBP10074=11027=Y426=2.1-1=17142GB7uso#0100=EUCB221=148=59198795167=CS456=10111022=20170522-06:56:10.55611059=117=1421226107318=510006=;TBS;;;TBS;CI14207561044;TTDMA;10093=110037=QFF29=110067=210.010066=20170522-06:56:14.84430=TRQX31=2.132=5.0779=20170522-06:56:16.09511026=20170522-06:56:10.562151=10.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17142GB7uso38=15.010008=0-5=17142G18z1w44=2.1-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=5919879522=101120=GBP63=010005=7510063=5.010065=0.055=VOD.L-14=059=075=2017052210039=LNPG377=N132=224.9133=225.010013=;CC:205padJBc.3N4NTj;DT:00075610;60=20170522-06:56:14.84410079=310077=110078=1010092=710064=;MC:1;EX:TRQX;10081=1420756104410083=GTC_HANDLER660=10311184=15.011210=17142G18z1w100232=5809871=17142GB7uso100169=N6=2.1425=5.010210=N10217=N10208=UK.QFF.OES10184=17142GB7uso10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S_A18002=CFAK42S_A18003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=5.010537=TRQX10521=110522=O10523=110524=SBSH10525=11133=D11083=BG_AE110673=N10236=Bloomberg10237=Radianz424=15.010890=0.010895=10005545928008=QDMA8015=CFAK42S_A18012=201705228007=?8037=612034=Y-8003=EUCB210438=RIO.4.5454=18019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;8022=PDB8023=20170522-16:00:00-35=810=00095=187796=8=FIX.4.49=185335=UZDO49=QFF56=CGMI50=C4XO_UKQA_C1U_257=EUCB2143=2052=20170522-06:56:10.559122=20170522-06:56:10.464-11=14954361760941=BG_AE154=1581=110040=S10018=17142GBp7ez10053=DMA11=14207561044:CFAK42S_A110080=20170522-06:56:10.55510049=N11041=1711043=0.011097=25.0421=GBR10038=LNPG14=5.010025=111032=315=GBP10074=11027=N426=2.1-1=17142G18z1w#0100=QFF21=148=59198795456=10111022=20170522-06:56:10.55611059=117=1421226107318=510006=;TBS;TFGTC;CI14207561044;TTDMA;10093=110037=QFF29=110067=210.010066=20170522-06:56:14.84430=TRQX31=2.132=5.0779=20170522-06:56:16.09511026=20170522-06:56:10.559151=10.010031=0A10016=QFF40=2528=A10044=;8018=C4C_UKQA_C1U_2^^^~37=17142G18z1w38=15.010008=044=2.1-33=;RC:E;9730=110033=410042=A10036=LNPG10043= 455=5919879522=101120=GBP63=010005=7510063=5.010065=0.055=VOD.L-14=059=175=2017052210039=LNPG132=0.0-30=15.010013=;CC:14207561044:CFAK42S_A1;DT:00075610;60=20170522-06:56:14.84410079=310077=110078=1010092=710064=;EX:TRQX;10081=1420756104410083=QFF660=10311184=15.011210=17142G18z1w9871=17142GB7uso10140=1561=1.0118=0.0100169=N6=2.1425=5.010217=N10208=UK.QFF.OES10203=EMEAQFF10292=12810204=EUCB210202=EMEADMA10201=UKFF382=1375=TRQX8001=CFAK42S_A18002=CFAK42S_A18003=EUCB28004=BG_AE110515=7510518=7510533=110534=TRQX10535=510536=5.010537=TRQX10521=110522=O10523=110524=SBSH10525=11133=D10673=N10236=Bloomberg10237=Radianz424=15.010890=0.010895=10005545928008=QDMA8015=CFAK42S_A18012=201705228037=68007=?12034=N10438=RIO.4.5454=18019=GTCPassChildReject=Y;BlockDFD=Y;AutoMergeF=R;OrderPlacer=1000554592;SuppressBE=EMEALQFI:UKSMART:EUCB2;BranchID=S;GBPFlag=Y;MultiDayPDB=Y;SkipPDB=N;ZARFlag=Y;RerouteEligible=AUTO;OmsBbeEnabled=Y;ILSFlag=Y;EnableCLS=Y;8022=PDBGTC8023=20180522-17:00:00-35=810=00010=000";
		
		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX44New.xml");
		Map settings = Configurator.getInstance().getConfiguration();
		settings.put("AllowEmptyTagsInMsg", "true");
		settings.put("RaiseFixParseException", "true");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		
		Message actualConvertedMsg = helper.createFixMessage(message);
		Message expConvertedMsg = helper.createFixMessage(expMessage);
		boolean res = false;
		try {
			helper.compareMessage(actualConvertedMsg, expConvertedMsg, false);
		} catch(MessageIncorrect ex) {
			res = ex.getMessage().contains("Tag 96 has incorrect sub tag values");
		}
		Assert.assertTrue("Message Incorrect exception not raised", res);
	}
	
	@Test
	public void verifyMessageParseAB() throws ConfigError, Exception {
		String message = "8=FIX.4.235=AB40=111=JDS_CLORD#13.01_6421=360=20180613-11:51:11.19438=1559=0167=MLEG555=2654=Leg1600=AAPL608=OC611=20190118612=100623=1624=1564=O654=Leg2600=AAPL608=OP611=20190118612=130623=2624=2564=O1=14180032204=08888=PF10=000";
		
		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX42New.xml");
		Map settings = Configurator.getInstance().getConfiguration();
		settings.put("AllowEmptyTagsInMsg", "true");
		settings.put("RaiseFixParseException", "true");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		
		Message convertedMsg = helper.createFixMessage(message);

		Assert.assertTrue("Tag 8888 is not present", convertedMsg.isSetField(8888));
		Assert.assertTrue("Tag 1 is not present", convertedMsg.isSetField(1));
		Group gp = convertedMsg.getGroup(1, 555);
		String value = gp.getString(600);
		Assert.assertNotNull("Tag 600 is not present in group 1", value);
		gp = convertedMsg.getGroup(2, 555);
		value = gp.getString(600);
		Assert.assertNotNull("Tag 555 is not present in group 2", value);

		message = "58=Options Max Notional Check Multi Leg|8=FIX.4.2|35=AB|40=1|55=AMZN|11=MAR-MAXNOT-ML#TT05_mnm|8888=FF|38=9998|59=0|77=O|167=MLEG|1=11580210|204=0|440=14290141|439=418|555=4|654=1|600=AMZN|608=OP|610=201901|611=20190118|612=400|623=1|624=1|564=C|654=2|600=AMZN|608=OC|610=201901|611=20190118|612=400|623=1|624=2|564=C|654=3|600=AMZN|608=OC|610=201901|611=20190118|612=400|623=1|624=2|564=C|654=4|600=AMZN|608=OC|610=201901|611=20190118|612=400|623=1|624=1|";

		convertedMsg = helper.convertFulluserstrToMessage(null, message);
		
		gp = convertedMsg.getGroup(2, 555);
		value = gp.getString(654);
		Assert.assertNotNull("Tag 654 is not present in group 2", value);
		System.out.println("Tag 654 is not present in group 2 " + value);
		
		gp = convertedMsg.getGroup(3, 555);
		value = gp.getString(600);
		Assert.assertNotNull("Tag 600 is not present in group 3", value);
		System.out.println("Tag 600 is not present in group 3 " + value);
		
		gp = convertedMsg.getGroup(4, 555);
		value = gp.getString(610);
		Assert.assertNotNull("Tag 610 is not present in group 4", value);
		System.out.println("Tag 610 is not present in group 4 " + value);
	}
	
	@Test
	public void verifyMessageParseMLS() throws ConfigError, Exception {

		String message = "58=Options NBBO out of band|8=FIX.4.2|35=D|40=1|54=1|55=SLV|11=MAR-17-010203#TE02_18|8888=FF|21=3|38=200|59=0|202=35|200=201901|205=18|201=1|77=O|167=OPT|1=17770000|204=0|";
		
		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX42New.xml");
		Map settings = Configurator.getInstance().getConfiguration();
		settings.put("AllowEmptyTagsInMsg", "true");
		settings.put("RaiseFixParseException", "true");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		Message convertedMsg = helper.convertFulluserstrToMessage(null, message);
		Assert.assertTrue("Tag 167 not present", convertedMsg.isSetField(167));
	}
	
	@Test
	public void verifyMessageParseAC() throws ConfigError, Exception {
		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX42New.xml");
		Map settings = Configurator.getInstance().getConfiguration();
		settings.put("AllowEmptyTagsInMsg", "true");
		settings.put("RaiseFixParseException", "true");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());

		String message = "58=New Order ->Partial fills , replace full fills|8=FIX.4.2|35=AC|40=1|55=AMZN|11=REG_CLORD#TT11_21|41=REG_CLORD#TT11_17|8888=FF|38=15|59=0|77=O|167=MLEG|1=14430443|204=0|440=14290141|439=418|555=4|654=1|600=AMZN|608=OP|610=201901|611=20190118|62=400|623=1|624=1|564=C|654=2|600=AMZN|608=OC|610=201901|611=20190118|612=400|623=1|624=2|564=C|654=3|600=AMZN|608=OC|610=201901|611=20190118|612=400|623=1|624=2|564=C|654=4|600=AMZN|608=OC|610=201901|61=20190118|612=400|623=1|624=1|564=C|";

		Message convertedMsg = helper.convertFulluserstrToMessage(null, message);
		
		Group gp = convertedMsg.getGroup(2, 555);
		String value = gp.getString(654);
		Assert.assertNotNull("Tag 654 is not present in group 2", value);
		System.out.println("Tag 654 is not present in group 2 " + value);
		
		gp = convertedMsg.getGroup(3, 555);
		value = gp.getString(600);
		Assert.assertNotNull("Tag 600 is not present in group 3", value);
		System.out.println("Tag 600 is not present in group 3 " + value);
		
		gp = convertedMsg.getGroup(4, 555);
		value = gp.getString(610);
		Assert.assertNotNull("Tag 610 is not present in group 4", value);
		System.out.println("Tag 610 is not present in group 4 " + value);
	}
	
	@Test
	public void verifyMissingGroupInActualMsg() throws ConfigError, Exception {
		boolean flag = false;
		String actualMessage = "8=FIX.4.49=72135=RIO34=049=ONECONNECT52=19700101-00:00:00.00056=RIOMSG1=CMaxFloor6=0.000011=0318130843809:74ONECON_JGQ4214=015=USD17=E9074172005yed6#221=322=10131=0.032=037=19074172005yed638=1039=040=244=200.048=780161754=155=AAPL58=RIOExecutionReport59=060=20190318-07:39:06.51275=20190318100=CITISMRT150=0151=10167=CS372=8421=USA455=7801617456=1018001=ONECON_JGQ428002=ONECON_JGQ42_CMaxFloor8003=CITISMRT8004=CMaxFloor10005=610006=ContinuousOrder;10016=QFF10033=610036=MLB10042=A10080=20190318-07:38:44.76810104=Y10201=USFF10202=USDSA10203=USQFF10204=CITISMART10208=US.QFF.OES10223=110236=Proprietary10237=FIX10438=RIO.4.510515=611032=111210=19074172005yed612052=1100134=Y10=105";
		String expectedMessage = "8=FIX.4.49=156735=RIO49=QFF50=QFFX_US_I452=/(.)*/56=CGMI57=/(.)*/122=$GM1.122143=/(.)*/627=1628=USFF.OSM.4-10892=/(.)*/-10208=C4.RIO-497=/(.)*/-35=/(.)*/-33=/(.)*/-17=electronic-15=/(.)*/-14=/(.)*/-11=/(.)*/-9=/(.)*/-8=/(.)*/-1=19074172005yed61=LYON6=/(.)*/11=/(.)*/14=0.015=USD18=121=322=10137=19074172005yed638=1039=040=244=20048=780161754=155=AAPL58=FAST59=060=/(.)*/63=075=/(.)*/100=CITISMRT120=USD150=0151=8.0167=CS207=NASD336=9372=8377=N386=1421=USA424=10425=/(.)*/426=/(.)*/454=1455=7801617456=101528=A581=1660=103779=/(.)*/847=1028957=1958=/(.)*/(1)959=12(1)960=O(1)1133=D1727=7296438=N7411=78001=ONECON_JGQ428002=ONECON_JGQ42_CMaxFloor8003=CITISMRT8004=CMaxFloor8013=R8455=/(.)*/8999=S10000=/(.)*/10005=610006=/(.)*/10007=/(.)*/10008=/(.)*/10013=/(.)*/10016=QFF10025=/(.)*/10031=0A10033=410036=MLB10037=QFF10038=/(.)*/10039=/(.)*/10040=Y10041=TB10042=A10043= 10044=/(.)*/10049=N10050=/(.)*/10051=0028144814LAV10053=/(.)*/10065=0.010066=/(.)*/10071=/(.)*/10074=10075=210077=110078=1010079=210080=/(.)*/10081=$GM1.1008110083=QFF10092=/(.)*/10100=/(.)*/10104=Y10118=Y10184=19074172005yed610200=/(.)*/10201=USFF10202=USDMA10203=USQFF10204=CITISMRT10206=/(.)*/10207=USFF10208=US.QFF.OES10217=N10236=Bloomberg10237=Bloomberg10292=/(.)*/10438=RIO.4.510515=610518=610673=N10890=0.011022=/(.)*/11026=/(.)*/11027=N11032=/(.)*/11041=1711042=311043=/(.)*/11097=/(.)*/11184=/(.)*/11210=19074172005yed612034=Y12052=/(.)*/100134=Y100169=Y10=215";

		Map<String, String> agentParams = new HashMap<String, String>();
		agentParams.put("DataDictionary", "quickfix_spec/FIX44New.xml");
		FixHelper helper = new FixHelper(agentParams, Configurator.getInstance());
		Message actual = helper.createFixMessage(actualMessage);
		Message expected = helper.createFixMessage(expectedMessage);
		try {
			helper.compareMessage(actual, expected, true);
		} catch (MessageIncorrect ex) {
			flag = true;
		}
		Assert.assertTrue("Expected exception not raised", flag);
	}

}
